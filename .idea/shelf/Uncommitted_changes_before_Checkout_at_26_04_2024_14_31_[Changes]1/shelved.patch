Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from flask import Flask, render_template, redirect, request\r\nfrom werkzeug.security import generate_password_hash, check_password_hash\r\nfrom flask_mail import Message, Mail\r\nfrom forms import LoginForm, RegisterForm, VerifyForm\r\nfrom data import db_session\r\nfrom data.users import User\r\nfrom flask_login import login_user, LoginManager, logout_user, login_required\r\nfrom random import randint\r\n\r\n\r\napp = Flask(__name__, template_folder='static/templates')\r\napp.config['SECRET_KEY'] = 'yandexlyceum_secret_key'\r\napp.config['MAIL_SERVER'] = 'smtp.gmail.com'\r\napp.config['MAIL_PORT'] = 587\r\napp.config['MAIL_DEFAULT_SENDER'] = 'tlt.ceilings63@gmail.com'\r\napp.config['MAIL_USERNAME'] = 'tlt.ceilings63@gmail.com'\r\napp.config['MAIL_PASSWORD'] = 'yedk uijg enpw zjhg'\r\napp.config['MAIL_USE_TLS'] = True\r\napp.config['MAIL_USE_SSL'] = False\r\nlogin_manager = LoginManager()\r\nlogin_manager.init_app(app)\r\nmail = Mail()\r\nmail.init_app(app)\r\nwith app.app_context():\r\n    message = Message(subject='Код для подтверждения регистрации')\r\n\r\n\r\nusers_info = {\r\n\r\n}\r\n\r\n\r\ndef main():\r\n    db_session.global_init('db/userdata.db')\r\n    app.run(port=5500, host='127.0.0.1')\r\n\r\n\r\n@login_manager.user_loader\r\ndef load_user(user_id):\r\n    db_sess = db_session.create_session()\r\n    return db_sess.query(User).get(user_id)\r\n\r\n\r\ndef setup_user(data):\r\n    surname = data['surname']\r\n    name = data['name']\r\n    sex = data['sex']\r\n    b_day = data['b_day']\r\n    email = data['email']\r\n    password = data['pwd']\r\n    db_sess = db_session.create_session()\r\n    user = User(\r\n        surname=surname,\r\n        name=name,\r\n        sex=sex,\r\n        b_day_date=b_day,\r\n        email=email,\r\n        password_hash=generate_password_hash(password),\r\n        pwd=password\r\n    )\r\n    db_sess.add(user)\r\n    db_sess.commit()\r\n\r\n\r\n\r\n@app.route('/')\r\n@app.route('/about')\r\ndef about():\r\n    return render_template('about.html', encoding='utf8')\r\n\r\n\r\n@app.route('/reviews')\r\ndef reviews():\r\n    reviews = [{'images': [\r\n        'https://plus.unsplash.com/premium_photo-1677178660876-8578f4f6cbac?q=80&w=1587&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\r\n        'https://images.unsplash.com/photo-1712928247899-2932f4c7dea3?q=80&w=1471&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\r\n        'https://plus.unsplash.com/premium_photo-1677178660876-8578f4f6cbac?q=80&w=1587&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\r\n        'https://plus.unsplash.com/premium_photo-1677178660876-8578f4f6cbac?q=80&w=1587&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D'],\r\n        'text': 'YYYYeeeee haaaAaaaa'}, {'images': [\r\n        'https://plus.unsplash.com/premium_photo-1677178660876-8578f4f6cbac?q=80&w=1587&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\r\n        'https://images.unsplash.com/photo-1712928247899-2932f4c7dea3?q=80&w=1471&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\r\n        'https://plus.unsplash.com/premium_photo-1677178660876-8578f4f6cbac?q=80&w=1587&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D'],\r\n        'text': 'YYYYeeeeррррррррррррррррррррррррррррppppppppppppppppp3ррррррe ha'}, {'images': [],\r\n        'text': 'YYYYeeeeррррррррррррррррррррррррррррppppppppppppppppp3ррррррe ha'},\r\n        {'images': [\r\n            'https://plus.unsplash.com/premium_photo-1677178660876-8578f4f6cbac?q=80&w=1587&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\r\n            'https://images.unsplash.com/photo-1712928247899-2932f4c7dea3?q=80&w=1471&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D'],\r\n            'text': 'YYYYeeeeррррррррррррррррррррррррррррppppppppppppppppp3ррррррe ha'}]\r\n    return render_template('reviews.html', encoding='utf8', reviews=reviews)\r\n\r\n\r\n@app.route('/order')\r\ndef order():\r\n    return render_template('order.html', encoding='utf8', price=999999)\r\n\r\n\r\n@app.route('/login', methods=['GET', 'POST'])\r\ndef login():\r\n    form = LoginForm()\r\n    if form.validate_on_submit():\r\n        db_sess = db_session.create_session()\r\n        user = db_sess.query(User).filter(User.email == form.email.data).first()\r\n        if user and check_password_hash(user.password_hash, form.password.data):\r\n            login_user(user, remember=form.remember_me.data)\r\n            return redirect(\"/\")\r\n        return render_template('login.html',\r\n                               message=\"Неправильный логин или пароль\",\r\n                               form=form)\r\n    return render_template('login.html', title='Авторизация', form=form)\r\n\r\n\r\n@app.route('/logout')\r\n@login_required\r\ndef logout():\r\n    logout_user()\r\n    return redirect(\"/\")\r\n\r\n\r\n@app.route('/registration', methods=['GET', 'POST'])\r\ndef reqister():\r\n    form = RegisterForm()\r\n    if form.validate_on_submit():\r\n        if form.password.data != form.password_again.data:\r\n            return render_template('register.html', title='Регистрация',\r\n                                   form=form,\r\n                                   message=\"Пароли не совпадают\")\r\n        db_sess = db_session.create_session()\r\n        if db_sess.query(User).filter(User.email == form.email.data).first():\r\n            return render_template('register.html', title='Регистрация',\r\n                                   form=form,\r\n                                   message=\"Такой пользователь уже есть\")\r\n        message.recipients = [form.email.data]\r\n        user_info = {}\r\n        user_info['surname'] = form.surname.data\r\n        user_info['name'] = form.name.data\r\n        user_info['sex'] = form.sex.data\r\n        user_info['b_day'] = form.b_day.data\r\n        user_info['email'] = form.email.data\r\n        user_info['pwd'] = form.password.data\r\n        users_info[form.email.data] = user_info\r\n        res = redirect('/verification')\r\n        res.set_cookie(key='email', value=form.email.data, max_age=600)\r\n        return res\r\n    return render_template('register.html', title='Регистрация', form=form)\r\n\r\n\r\n@app.route('/verification', methods=['GET', 'POST'])\r\ndef verify():\r\n    form = VerifyForm()\r\n    email = request.cookies.get('email')\r\n    if not form.is_submitted():\r\n        code = randint(11111, 99999)\r\n        users_info[email]['code'] = code\r\n        message.body = f'Ваш код: {code}'\r\n        mail.send(message)\r\n    if form.validate_on_submit():\r\n        code = users_info[email]['code']\r\n        if int(form.value.data) == int(code):\r\n            setup_user(users_info[email])\r\n            db_sess = db_session.create_session()\r\n            user = db_sess.query(User).filter(User.email == email).first()\r\n            login_user(user)\r\n            res = redirect('/')\r\n            res.delete_cookie(key='email')\r\n            return res\r\n        return render_template('register.html', title='Регистрация', message='Неверный код подтверждения', form=RegisterForm())\r\n    return render_template('verification.html', title='Верификация', form=form)\r\n\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	
+++ b/main.py	
@@ -56,7 +56,6 @@
         b_day_date=b_day,
         email=email,
         password_hash=generate_password_hash(password),
-        pwd=password
     )
     db_sess.add(user)
     db_sess.commit()
